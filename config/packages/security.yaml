security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Observer
                property: observer_name
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # main:
        #     anonymous: lazy
        #     json_login:
        #         check_path: signin
        #         success_handler: lexik_jwt_authentication.handler.authentication_success
        #         failure_handler: lexik_jwt_authentication.handler.authentication_failure
        #     logout:
        #         path: logout
                
        login:
            pattern:  ^/api/auth
            stateless: true
            anonymous: lazy
            json_login:
                check_path: signin
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: logout
        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator    

            # guard:
            #     authenticators:
            #         - App\Security\LoginFormAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/auth/signup, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/auth/signin, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/signout, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    encoders:
        # use your user class name here
        App\Entity\Observer:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            # (i.e. Sodium when available).
            algorithm: auto
